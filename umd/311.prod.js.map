{"version":3,"file":"311.prod.js","mappings":"oNASA,MAAMA,GAAWC,EAAAA,EAAAA,gBAAe,CAC9BC,0BAA2B,CACzBC,GAAI,4BACJC,eAAgB,CAAF,8DAGhBC,wBAAyB,CACvBF,GAAI,0BACJC,eAAgB,CAAF,sEAKlB,MAAME,UAA0BC,IAAAA,cAC9BC,YAAYC,GACVC,MAAMD,GAENE,KAAKC,MAAQ,CACXC,IAAK,GACLC,MAAO,GACPC,SAAU,GACVC,MAAM,EACNC,UAAU,EACVC,KAAM,IAGRP,KAAKQ,aAAeR,KAAKQ,aAAaC,KAAKT,MAC3CA,KAAKU,kBAAoBV,KAAKU,kBAAkBD,KAAKT,MACrDA,KAAKW,qBAAuBX,KAAKW,qBAAqBF,KAAKT,MAC3DA,KAAKY,iBAAmBZ,KAAKY,iBAAiBH,KAAKT,MACnDA,KAAKa,oBAAsBb,KAAKa,oBAAoBJ,KAAKT,MAGzDF,EAAMgB,OAAOC,UACVC,OAAMC,IACLjB,KAAKF,MAAMoB,QAAQD,EAAIE,QAAS,MAAM,GAE5C,CAEAC,oBACE,MAAMC,EAASC,EAAAA,EAAAA,aAA4BC,OAAOC,SAASC,MACrDC,EAAW,CACfC,MAAON,EAAOO,OAAOD,MACrBE,OAAQR,EAAOO,OAAOC,OACtBtB,KAAMc,EAAOO,OAAOrB,MAAQ,IAG9BP,KAAK8B,UAAYT,EAAOO,OAAOG,KAC3B/B,KAAKF,MAAMkC,eAAiBX,EAAOO,OAAOG,OAC5CL,EAAS1B,KAAKF,MAAMkC,eAAiBhC,KAAK8B,WAE5C9B,KAAKiC,SAASP,EAChB,CAEAQ,mBAAmBC,EAAWC,GACxBD,EAAUH,eAAiBhC,KAAKF,MAAMkC,eAAiBhC,KAAKF,MAAMkC,eACpEhC,KAAKiC,SAAS,CAAC,CAACjC,KAAKF,MAAMkC,eAAgBhC,KAAK8B,WAAa,IAEjE,CAEAtB,aAAa6B,GAEX,GADAA,EAAEC,iBACEtC,KAAKC,MAAM0B,MAEb3B,KAAKF,MAAMyC,QAAQvC,KAAKC,MAAMG,SAASoC,OAAQ,CAC7CX,OAAQ,QACRY,OAAQzC,KAAKC,MAAM0B,aAEhB,GAAI3B,KAAKC,MAAMM,MAAQP,KAAKF,MAAMkC,cAAe,CAGtD,MAAMD,EAAmC,SAA5B/B,KAAKF,MAAMkC,cAA2BhC,KAAKC,MAAME,MAAMqC,OAASxC,KAAKC,MAAMC,IAAIsC,OAC5FxC,KAAKF,MAAMyC,QAAQvC,KAAKC,MAAMG,SAASoC,OAAQ,CAC7CX,OAAQ,OACRY,OAAQC,KAAM,GAAE1C,KAAKC,MAAMM,QAAQP,KAAKF,MAAMkC,iBAAiBD,MAEnE,KAAO,CAEL,MAAM5B,EAAQH,KAAKC,MAAME,MAAMqC,OACzBtC,EAAMF,KAAKC,MAAMC,IAAIsC,OAC3BxC,KAAKiC,SAAS,CAAC9B,MAAOA,EAAOD,IAAKA,IAClCF,KAAKF,MAAM6C,UAAU3C,KAAKF,MAAMkC,cAAe7B,GAASD,GACrD0C,MAAKC,IACJ7C,KAAKiC,SAAS,CAAC5B,MAAM,IACrB,MAAMyC,EAAkC,SAA5B9C,KAAKF,MAAMkC,cAA2B3C,EAASE,0BAC7B,OAA5BS,KAAKF,MAAMkC,cAAyB3C,EAASK,wBAA0B,KACrEoD,GACF9C,KAAKF,MAAMoB,QAAQlB,KAAKF,MAAMiD,KAAKC,cAAcF,GAAM,OACzD,GAEN,CACF,CAEApC,kBAAkB2B,GAChBrC,KAAKiC,SAAS,CAAC9B,MAAOkC,EAAEY,OAAOC,OACjC,CAEAvC,qBAAqB0B,GACnBrC,KAAKiC,SAAS,CAAC7B,SAAUiC,EAAEY,OAAOC,OACpC,CAEAtC,iBAAiByB,GACfrC,KAAKiC,SAAS,CAAC1B,KAAM8B,EAAEY,OAAOC,MAAMC,QAAQ,SAAU,KACxD,CAEAtC,oBAAoBwB,GAClBA,EAAEC,iBACFtC,KAAKiC,SAAS,CAAC3B,UAAU,GAC3B,CAEA8C,SACE,MAAMC,KAAyBrD,KAAKC,MAAM0B,OAAU3B,KAAKC,MAAMM,MAAQP,KAAKF,MAAMkC,gBAAmBhC,KAAKC,MAAM4B,QAC1GyB,GAAqBD,GAAuBrD,KAAKC,MAAMK,UAAYN,KAAKC,MAAMI,KAE9EkD,EAAiB3D,IAAAA,cAAAA,IAAAA,SAAA,KACnBA,IAAAA,cAAA,SAAO4D,UAAU,aAAaC,QAAQ,gBACpC7D,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,qBAClBC,eAAc,mCAGlBG,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,2BAA4BC,eAAc,wCAE3DkE,GAAgB/D,IAAAA,cAACgE,EAAAA,EAAe,CAC/BpE,GAAG,eACHmE,YAAaA,EACbE,aAAa,eACbX,MAAOlD,KAAKC,MAAMG,SAClB0D,UAAU,EAAMC,WAAW,EAC3BC,SAAUhE,KAAKW,0BAIjBsD,EAAcrE,IAAAA,cAAAA,IAAAA,SAAA,KACfI,KAAKC,MAAMK,SACV,KACAV,IAAAA,cAAA,SAAO6D,QAAQ,cACb7D,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,uBAClBC,eAAc,kDAIpBG,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,0BAA2BC,eAAc,6CAE1DkE,GAAgB/D,IAAAA,cAAA,SAAOsE,KAAK,QAAQ1E,GAAG,aACtCmE,YAAaA,EACbE,aAAa,QACbX,MAAOlD,KAAKC,MAAME,MAClB6D,SAAUhE,KAAKU,kBACfoD,UAAQ,EAACC,WAAS,OAIpBI,EAAcvE,IAAAA,cAAAA,IAAAA,SAAA,KACfI,KAAKC,MAAMK,SACV,KACAV,IAAAA,cAAA,WAAKA,IAAAA,cAAA,aACHA,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,2BAClBC,eAAc,kDAIpBG,IAAAA,cAAA,WACEA,IAAAA,cAAA,SAAO4D,UAAU,cACf5D,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,sBAAuBC,eAAc,2CAI7DG,IAAAA,cAAA,OAAK4D,UAAU,kBACb5D,IAAAA,cAACwE,EAAAA,EAAS,CACRL,WAAW,EACXM,sBAAuBrE,KAAKF,MAAMuE,sBAClCC,SAAUC,GAAUvE,KAAKiC,SAAS,CAAC/B,IAAKqE,QAI1CC,EAAa5E,IAAAA,cAAAA,IAAAA,SAAA,KACfA,IAAAA,cAAA,WACEA,IAAAA,cAAA,SAAO4D,UAAU,aAAaC,QAAQ,2BACpC7D,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,iCAClBC,eAAc,yCAIpBG,IAAAA,cAAA,WACEA,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,mCAClBC,eAAc,kCACbgF,GAAiB7E,IAAAA,cAAA,SAAOsE,KAAK,OAAO1E,GAAG,0BACtCmE,YAAac,EAAcC,UAAW,GACtCxB,MAAOlD,KAAKC,MAAMM,KAAMyD,SAAUhE,KAAKY,iBAAkBkD,UAAQ,QAKrEa,EAA8C,SAA5B3E,KAAKF,MAAMkC,cACjCiC,EAAyC,OAA5BjE,KAAKF,MAAMkC,cAAyBmC,EAAa,KAEhE,OACEvE,IAAAA,cAAA,QAAMJ,GAAG,sBAAsB8E,SAAUtE,KAAKQ,eAC1CR,KAAKC,MAAMI,MAAQgD,EAAsBsB,EAAkB,KAC5D3E,KAAKC,MAAMK,UAAYN,KAAKC,MAAMI,KAAOmE,EAAY,KACrDlB,EAAoBC,EAAgB,KACrC3D,IAAAA,cAAA,OAAK4D,UAAU,kBACZxD,KAAKC,MAAMK,UAAYN,KAAKC,MAAMI,MAAQL,KAAKC,MAAM0B,OAAS3B,KAAKC,MAAMM,KAAO,KAC/EX,IAAAA,cAAA,KAAGgF,KAAK,IAAIC,QAAS7E,KAAKa,oBAAqBiE,MAAO,CAACC,YAAa,SAClEnF,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,uBAAwBC,eAAc,kCAI9DG,IAAAA,cAAA,UAAQ4D,UAAU,UAAUU,KAAK,UAC/BZ,EACE1D,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,eAAgBC,eAAc,2BAElDG,IAAAA,cAAC8D,EAAAA,iBAAgB,CAAClE,GAAE,sBAAuBC,eAAc,oCAMrE,EAGF,SAAeuF,EAAAA,EAAAA,YAAWrF,E,6HC5N1B,MAAMN,GAAWC,EAAAA,EAAAA,gBAAe,CAC9B2F,uBAAwB,CACtBzF,GAAI,yBACJC,eAAgB,CAAF,kDAKlB,MAAM2E,UAAkBxE,IAAAA,cACtBC,YAAYC,GACVC,MAAMD,GAENE,KAAKkF,QAAU,CAAC,EAChBC,EAAAA,SAAuBC,IAAQpF,KAAKkF,QAAQE,EAAG7E,MAAQ6E,EAAGC,IAAI,IAE9D,MAAM9E,EAAOT,EAAMwF,aAAe,KAC5BD,EAAOrF,KAAKkF,QAAQ3E,GAE1BP,KAAKC,MAAQ,CACXqF,YAAa/E,EACbgF,SAAUF,EACVG,YAAa,GACbC,kBAAmBzF,KAAKyF,kBAAkBlF,EAAM8E,IAGlDrF,KAAK0F,aAAe1F,KAAK0F,aAAajF,KAAKT,MAC3CA,KAAK2F,eAAiB3F,KAAK2F,eAAelF,KAAKT,MAC/CA,KAAK4F,cAAgB5F,KAAK4F,cAAcnF,KAAKT,MAC7CA,KAAK6F,oBAAsB7F,KAAK6F,oBAAoBpF,KAAKT,KAC3D,CAEA0F,aAAarD,GACX,MAAMyD,EAAU,IAAG9F,KAAKC,MAAMsF,WAC9B,IAAIQ,GAAY,IAAIC,EAAAA,GAAYC,MAAO,GAAEH,IAAS9F,KAAKkG,aAAa7D,EAAEY,OAAOC,UAC7E6C,EAAYA,EAAUI,UAAUL,EAAOM,QAAQ5D,OAC/CxC,KAAKiC,SAAS,CAACuD,YAAaO,GAC9B,CAEAJ,eAAetD,GACbA,EAAEC,iBACF,MAAM+D,EAAO,GAAErG,KAAKC,MAAMsF,WAAWvF,KAAKC,MAAMuF,YAAYhD,SAASW,QAAQ,SAAU,IACvF,IAAIoB,EAAS,KACb,IACEA,GAAS+B,EAAAA,EAAAA,GAAkB,IAAGD,IAChC,CAAE,MAAOpF,GAAM,CAEVsD,GAAWA,EAAOgC,WAKvBvG,KAAKwG,WAAWC,kBAAkB,IAClCzG,KAAKF,MAAMwE,SAASC,EAAOmC,OAAO,WALhC1G,KAAKwG,WAAWC,kBAAkBzG,KAAKF,MAAMiD,KAAKC,cAAc3D,EAAS4F,wBAM7E,CAGAW,cAAcvD,GACE,UAAVA,EAAEsE,KACJ3G,KAAK2F,eAAetD,EAExB,CAEAwD,sBACE7F,KAAKF,MAAMuE,sBAAsBrE,KAAKC,MAAMqF,YAAatF,KAAKC,MAAMsF,UAClE,CAAChF,EAAM8E,KACHrF,KAAKiC,SAAS,CACZqD,YAAa/E,EACbgF,SAAUF,EACVI,kBAAmBzF,KAAKyF,kBAAkBlF,EAAM8E,IAClD,GAER,CAGAa,aAAa3B,GACX,OAAKA,EAKEA,EAAOpB,QAAQ,eAAgB,IAJ7BoB,CAKX,CAEAkB,kBAAkBlF,EAAM8E,GACtB,MAAMuB,GAASC,EAAAA,EAAAA,GAAiBtG,EAAMuG,EAAAA,GACtC,OAAOF,EAASA,EAAOG,sBAAsBZ,UAAUd,EAAKe,OAAS,GAAG5D,OAAS,UACnF,CAEAY,SACE,OACExD,IAAAA,cAAAA,IAAAA,SAAA,KACEA,IAAAA,cAAA,QAAM4D,UAAU,YAAYqB,QAAS7E,KAAK6F,qBACxCjG,IAAAA,cAAA,QAAM4D,UAAU,iBAAgBwD,EAAAA,EAAAA,IAAUhH,KAAKC,MAAMqF,aAAa,KAAa,IAC7EtF,KAAKC,MAAMsF,SAAS,KACxB3F,IAAAA,cAAA,SAAOsE,KAAK,MAAM+C,IAAKA,IAAQjH,KAAKwG,WAAaS,CAAG,EAAGtD,YAAa3D,KAAKC,MAAMwF,kBAC3EvC,MAAOlD,KAAKC,MAAMuF,YAAaxB,SAAUhE,KAAK0F,aAC9ChB,UAAW,GAAIwC,UAAWlH,KAAK4F,cAAeuB,OAAQnH,KAAK2F,eAC3D7B,UAAQ,EAACC,UAAW/D,KAAKF,MAAMiE,YAGzC,EAGF,SAAeiB,EAAAA,EAAAA,YAAWZ,E","sources":["webpack://tinode-webapp/./src/views/password-reset-view.jsx","webpack://tinode-webapp/./src/widgets/phone-edit.jsx"],"sourcesContent":["// A password reset form.\nimport React from 'react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport PhoneEdit from '../widgets/phone-edit.jsx';\nimport VisiblePassword from '../widgets/visible-password.jsx';\n\nimport HashNavigation from '../lib/navigation.js';\n\nconst messages = defineMessages({\n  password_reset_email_sent: {\n    id: 'password_reset_email_sent',\n    defaultMessage: 'An email with security code has been sent.',\n    description: 'Notification that the email with password reset instructions has been sent'\n  },\n  password_reset_sms_sent: {\n    id: 'password_reset_sms_sent',\n    defaultMessage: 'A text message with security code has been sent.',\n    description: 'Notification that the SMS with password reset instructions has been sent'\n  }\n});\n\nclass PasswordResetView extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tel: '',\n      email: '',\n      password: '',\n      sent: false,\n      haveCode: false,\n      code: ''\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleCodeChange = this.handleCodeChange.bind(this);\n    this.handleShowCodeField = this.handleShowCodeField.bind(this);\n\n    // Connection will trigger change by changing the this.props.serverVersion.\n    props.tinode.connect()\n      .catch(err => {\n        this.props.onError(err.message, 'err');\n      });\n  }\n\n  componentDidMount() {\n    const parsed = HashNavigation.parseUrlHash(window.location.hash);\n    const newState = {\n      token: parsed.params.token,\n      scheme: parsed.params.scheme,\n      code: parsed.params.code || ''\n    }\n\n    this.savedCred = parsed.params.cred;\n    if (this.props.reqCredMethod && parsed.params.cred) {\n      newState[this.props.reqCredMethod] = this.savedCred;\n    }\n    this.setState(newState);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.reqCredMethod != this.props.reqCredMethod && this.props.reqCredMethod) {\n      this.setState({[this.props.reqCredMethod]: this.savedCred || ''});\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.token) {\n      // Reset using token.\n      this.props.onReset(this.state.password.trim(), {\n        scheme: 'token',\n        secret: this.state.token\n      });\n    } else if (this.state.code && this.props.reqCredMethod) {\n      // Reset using security code.\n      // The secret is structured as <code>:<cred_method>:<cred_value>, \"123456:email:alice@example.com\".\n      const cred = this.props.reqCredMethod == 'email' ? this.state.email.trim() : this.state.tel.trim();\n      this.props.onReset(this.state.password.trim(), {\n        scheme: 'code',\n        secret: btoa(`${this.state.code}:${this.props.reqCredMethod}:${cred}`)\n      });\n    } else {\n      // Send email or SMS with the secret code.\n      const email = this.state.email.trim();\n      const tel = this.state.tel.trim();\n      this.setState({email: email, tel: tel});\n      this.props.onRequest(this.props.reqCredMethod, email || tel)\n        .then(_ => {\n          this.setState({sent: true});\n          const msg = this.props.reqCredMethod == 'email' ? messages.password_reset_email_sent :\n            this.props.reqCredMethod == 'tel' ? messages.password_reset_sms_sent : null;\n          if (msg) {\n            this.props.onError(this.props.intl.formatMessage(msg), 'info');\n          }\n        });\n    }\n  }\n\n  handleEmailChange(e) {\n    this.setState({email: e.target.value});\n  }\n\n  handlePasswordChange(e) {\n    this.setState({password: e.target.value});\n  }\n\n  handleCodeChange(e) {\n    this.setState({code: e.target.value.replace(/[^\\d]/g, '')});\n  }\n\n  handleShowCodeField(e) {\n    e.preventDefault();\n    this.setState({haveCode: true});\n  }\n\n  render() {\n    const showCredentialInput = !((this.state.token || (this.state.code && this.props.reqCredMethod)) && this.state.scheme);\n    const showPasswordInput = !showCredentialInput || this.state.haveCode || this.state.sent;\n\n    const passwordInput = (<>\n        <label className=\"small gray\" htmlFor=\"new-password\">\n          <FormattedMessage id=\"label_new_password\"\n            defaultMessage=\"New password\"\n            description=\"Label for entering a new password\" />\n        </label>\n        <FormattedMessage id=\"new_password_placeholder\" defaultMessage=\"Enter new password\"\n          description=\"Placeholder for entering new password\">{\n          (placeholder) => <VisiblePassword\n            id=\"new-password\"\n            placeholder={placeholder}\n            autoComplete=\"new-password\"\n            value={this.state.password}\n            required={true} autoFocus={true}\n            onChange={this.handlePasswordChange} />\n        }</FormattedMessage>\n      </>);\n\n    const emailInput = (<>\n        {this.state.haveCode ?\n          null :\n          <label htmlFor=\"inputEmail\">\n            <FormattedMessage id=\"label_reset_password\"\n              defaultMessage=\"Send a password reset email\"\n              description=\"Label for password reset field\" />\n          </label>\n        }\n        <FormattedMessage id=\"credential_email_prompt\" defaultMessage=\"Your registration email\"\n          description=\"Placeholder for entering email\">{\n          (placeholder) => <input type=\"email\" id=\"inputEmail\"\n            placeholder={placeholder}\n            autoComplete=\"email\"\n            value={this.state.email}\n            onChange={this.handleEmailChange}\n            required autoFocus />\n        }</FormattedMessage>\n      </>);\n\n    const phoneInput = (<>\n        {this.state.haveCode ?\n          null :\n          <div><label>\n            <FormattedMessage id=\"label_reset_password_tel\"\n              defaultMessage=\"Send SMS to reset password\"\n              description=\"Label for password reset field by phone\" />\n          </label></div>\n        }\n        <div>\n          <label className=\"small gray\">\n            <FormattedMessage id=\"mobile_phone_number\" defaultMessage=\"Mobile phone number\"\n              description=\"Prompt for entering a mobile phone number\" />\n          </label>\n        </div>\n        <div className=\"panel-form-row\">\n          <PhoneEdit\n            autoFocus={true}\n            onShowCountrySelector={this.props.onShowCountrySelector}\n            onSubmit={number => this.setState({tel: number})} />\n        </div>\n      </>);\n\n    const codeInput = (<>\n        <div>\n          <label className=\"small gray\" htmlFor=\"enter-confirmation-code\">\n            <FormattedMessage id=\"enter_confirmation_code_prompt\"\n              defaultMessage=\"Confirmation code\"\n              description=\"Request to enter confirmation code\" />\n          </label>\n        </div>\n        <div>\n          <FormattedMessage id=\"numeric_confirmation_code_prompt\"\n            defaultMessage=\"Numbers only\" description=\"Prompt for numeric conformation code\">{\n            (numbers_only) => <input type=\"text\" id=\"enter-confirmation-code\"\n              placeholder={numbers_only} maxLength={10}\n              value={this.state.code} onChange={this.handleCodeChange} required />\n          }</FormattedMessage>\n        </div>\n      </>);\n\n    const credentialInput = this.props.reqCredMethod == 'email' ?\n      emailInput : this.props.reqCredMethod == 'tel' ? phoneInput : null;\n\n    return (\n      <form id=\"password-reset-form\" onSubmit={this.handleSubmit}>\n        {!this.state.sent && showCredentialInput ? credentialInput : null}\n        {this.state.haveCode || this.state.sent ? codeInput : null}\n        {showPasswordInput ? passwordInput : null}\n        <div className=\"dialog-buttons\">\n          {this.state.haveCode || this.state.sent || this.state.token || this.state.code ? null :\n            <a href=\"#\" onClick={this.handleShowCodeField} style={{marginRight: 'auto'}}>\n              <FormattedMessage id=\"password_i_have_code\" defaultMessage=\"I have code\"\n                description=\"Call to open field to enter password reset code\" />\n            </a>\n          }\n          <button className=\"primary\" type=\"submit\">{\n            showPasswordInput ?\n              <FormattedMessage id=\"button_reset\" defaultMessage=\"Reset\" description=\"Button [Reset]\" />\n            :\n              <FormattedMessage id=\"button_send_request\" defaultMessage=\"Send request\"\n                description=\"Button [Send request]\" />\n          }</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default injectIntl(PasswordResetView);\n","// Editor for a phone number.\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { AsYouType, getExampleNumber, parsePhoneNumber } from 'libphonenumber-js/mobile';\nimport examples from 'libphonenumber-js/mobile/examples'\n\nimport * as dcodes from '../dcodes.json';\nimport { flagEmoji } from '../lib/strformat';\n\nconst messages = defineMessages({\n  mobile_number_required: {\n    id: 'mobile_number_required',\n    defaultMessage: 'Mobile phone number required',\n    description: 'Error message'\n  }\n});\n\nclass PhoneEdit extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.codeMap = {};\n    dcodes.default.forEach(dc => { this.codeMap[dc.code] = dc.dial; });\n\n    const code = props.countryCode || 'US';\n    const dial = this.codeMap[code];\n\n    this.state = {\n      countryCode: code,\n      dialCode: dial,\n      localNumber: '',\n      placeholderNumber: this.placeholderNumber(code, dial)\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFinished = this.handleFinished.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.showCountrySelector = this.showCountrySelector.bind(this);\n  }\n\n  handleChange(e) {\n    const prefix = `+${this.state.dialCode}`;\n    let formatted = new AsYouType().input(`${prefix}${this.filterNumber(e.target.value)}`);\n    formatted = formatted.substring(prefix.length).trim();\n    this.setState({localNumber: formatted});\n  }\n\n  handleFinished(e) {\n    e.preventDefault();\n    const raw = `${this.state.dialCode}${this.state.localNumber.trim()}`.replace(/[^\\d]/g, '');\n    let number = null;\n    try {\n      number = parsePhoneNumber(`+${raw}`);\n    } catch (err) {}\n\n    if (!number || !number.isValid()) {\n      this.inputField.setCustomValidity(this.props.intl.formatMessage(messages.mobile_number_required));\n      return;\n    }\n\n    this.inputField.setCustomValidity('');\n    this.props.onSubmit(number.format('E.164'));\n  }\n\n\n  handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      this.handleFinished(e);\n    }\n  }\n\n  showCountrySelector() {\n    this.props.onShowCountrySelector(this.state.countryCode, this.state.dialCode,\n      (code, dial) => {\n          this.setState({\n            countryCode: code,\n            dialCode: dial,\n            placeholderNumber: this.placeholderNumber(code, dial)\n        })\n      });\n  }\n\n  // Filter out characters not permitted in a phone number.\n  filterNumber(number) {\n    if (!number) {\n      return number;\n    }\n    // Leave numbers, space, (, ), -, and .\n    // The + is not allowed: it's handled by the country code portion.\n    return number.replace(/[^-\\s().\\d]/g, '');\n  }\n\n  placeholderNumber(code, dial) {\n    const sample = getExampleNumber(code, examples);\n    return sample ? sample.formatInternational().substring(dial.length + 1).trim() : '123 0123';\n  }\n\n  render() {\n    return (\n      <>\n        <span className=\"dial-code\" onClick={this.showCountrySelector}>\n          <span className=\"country-flag\">{flagEmoji(this.state.countryCode)}&nbsp;</span>\n          +{this.state.dialCode}&nbsp;</span>\n        <input type=\"tel\" ref={ref => {this.inputField = ref}} placeholder={this.state.placeholderNumber}\n            value={this.state.localNumber} onChange={this.handleChange}\n            maxLength={17} onKeyDown={this.handleKeyDown} onBlur={this.handleFinished}\n            required autoFocus={this.props.autoFocus} />\n      </>\n    );\n  }\n}\n\nexport default injectIntl(PhoneEdit);\n"],"names":["messages","defineMessages","password_reset_email_sent","id","defaultMessage","password_reset_sms_sent","PasswordResetView","React","constructor","props","super","this","state","tel","email","password","sent","haveCode","code","handleSubmit","bind","handleEmailChange","handlePasswordChange","handleCodeChange","handleShowCodeField","tinode","connect","catch","err","onError","message","componentDidMount","parsed","HashNavigation","window","location","hash","newState","token","params","scheme","savedCred","cred","reqCredMethod","setState","componentDidUpdate","prevProps","prevState","e","preventDefault","onReset","trim","secret","btoa","onRequest","then","_","msg","intl","formatMessage","target","value","replace","render","showCredentialInput","showPasswordInput","passwordInput","className","htmlFor","FormattedMessage","placeholder","VisiblePassword","autoComplete","required","autoFocus","onChange","emailInput","type","phoneInput","PhoneEdit","onShowCountrySelector","onSubmit","number","codeInput","numbers_only","maxLength","credentialInput","href","onClick","style","marginRight","injectIntl","mobile_number_required","codeMap","dcodes","dc","dial","countryCode","dialCode","localNumber","placeholderNumber","handleChange","handleFinished","handleKeyDown","showCountrySelector","prefix","formatted","AsYouType","input","filterNumber","substring","length","raw","parsePhoneNumber","isValid","inputField","setCustomValidity","format","key","sample","getExampleNumber","examples","formatInternational","flagEmoji","ref","onKeyDown","onBlur"],"sourceRoot":""}