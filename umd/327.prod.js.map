{"version":3,"file":"327.prod.js","mappings":"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","sources":["webpack://tinode-webapp/./src/views/create-account-view.jsx","webpack://tinode-webapp/./src/widgets/phone-edit.jsx"],"sourcesContent":["// Account registration.\nimport React, { Suspense } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport AvatarCrop from '../widgets/avatar-crop.jsx';\nimport AvatarUpload from '../widgets/avatar-upload.jsx';\nimport CheckBox from '../widgets/checkbox.jsx';\nimport PhoneEdit from '../widgets/phone-edit.jsx';\nimport VisiblePassword from '../widgets/visible-password.jsx';\n\nimport LocalStorageUtil from '../lib/local-storage.js';\nimport { imageScaled, blobToBase64, makeImageUrl } from '../lib/blob-helpers.js';\nimport { theCard } from '../lib/utils.js';\n\nimport { AVATAR_SIZE, MAX_AVATAR_BYTES, MAX_EXTERN_ATTACHMENT_SIZE,\n  MAX_TITLE_LENGTH } from '../config.js';\n\nexport default class CreateAccountView extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: '',\n      password: '',\n      meth: '',\n      email: '',\n      tel: '',\n      fn: '', // full/formatted name\n      imageUrl: null,\n      uploadUrl: null,\n      newAvatar: null,\n      newAvatarMime: null,\n      buttonDisabled: false,\n      saveToken: LocalStorageUtil.getObject('keep-logged-in')\n    };\n\n    this.handleLoginChange = this.handleLoginChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePhoneChange = this.handlePhoneChange.bind(this);\n    this.handleFnChange = this.handleFnChange.bind(this);\n    this.handleImageChanged = this.handleImageChanged.bind(this);\n    this.handleToggleSaveToken = this.handleToggleSaveToken.bind(this);\n    this.handleAvatarCropped = this.handleAvatarCropped.bind(this);\n    this.handleAvatarCropCancel = this.handleAvatarCropCancel.bind(this);\n    this.uploadAvatar = this.uploadAvatar.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    // Connection will trigger change by changing the this.props.serverVersion.\n    props.tinode.connect()\n      .catch(err => {\n        this.props.onError(err.message, 'err');\n      });\n  }\n\n  handleLoginChange(e) {\n    this.setState({login: e.target.value});\n  }\n\n  handlePasswordChange(password) {\n    this.setState({password: password});\n  }\n\n  handleEmailChange(e) {\n    this.setState({meth: 'email', email: e.target.value});\n  }\n\n  handlePhoneChange(number) {\n    this.setState({meth: 'tel', tel: number});\n  }\n\n  handleFnChange(e) {\n    this.setState({fn: e.target.value});\n  }\n\n  handleImageChanged(mime, img) {\n    this.setState({newAvatar: img, newAvatarMime: mime});\n  }\n\n  handleToggleSaveToken() {\n    LocalStorageUtil.setObject('keep-logged-in', !this.state.saveToken);\n    this.setState({saveToken: !this.state.saveToken});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onCreateAccount(\n      this.state.login.trim(),\n      this.state.password.trim(),\n      theCard(this.state.fn.trim().substring(0, MAX_TITLE_LENGTH), this.state.uploadUrl),\n      {\n        'meth': this.state.meth,\n        'val': this.state.meth == 'email' ?\n          this.state.email :\n            this.state.meth == 'tel' ? this.state.tel : null\n      }\n    );\n  }\n\n  // AvatarCropView calls this method when the user has cropped the image.\n  handleAvatarCropped(mime, blob, width, height) {\n    const url = blob ? URL.createObjectURL(blob) : null;\n    this.setState({avatar: url, newAvatar: null, newAvatarMime: null});\n    if (blob) {\n      this.uploadAvatar(mime, blob, width, height);\n    }\n  }\n\n  handleAvatarCropCancel() {\n    this.setState({newAvatar: null, newAvatarMime: null});\n  }\n\n    // Utility method for converting cropped avatar blob to bytes for sending inband or\n  // for uploading it to the server out of band.\n  uploadAvatar(mime, blob, width, height) {\n    const readyToUpload = image => {\n      let {mime, blob} = image;\n      this.setState({imageUrl: URL.createObjectURL(blob), buttonDisabled: true});\n      if (blob.size > MAX_AVATAR_BYTES) {\n        // Too large to send inband - uploading out of band and sending as a link.\n        const uploader = this.props.tinode.getLargeFileHelper();\n        uploader.upload(blob, 'newacc')\n          .then(url => this.setState({uploadUrl: url}))\n          .catch(err => this.props.onError(err.message, 'err'))\n          .finally(_ => this.setState({buttonDisabled: false}));\n      } else {\n        // Convert blob to base64-encoded bits.\n        blobToBase64(blob)\n          .then(b64 => this.setState({uploadUrl: makeImageUrl({data: b64.bits, type: mime})}))\n          .finally(_ => this.setState({buttonDisabled: false}));\n      }\n    };\n\n    if (width > AVATAR_SIZE || height > AVATAR_SIZE || width != height) {\n      // Avatar is not square or too large even after cropping. Shrink it and make square.\n      imageScaled(blob, AVATAR_SIZE, AVATAR_SIZE, MAX_EXTERN_ATTACHMENT_SIZE, true)\n        .then(scaled => readyToUpload(scaled))\n        .catch(err => this.props.onError(err.message, 'err'));\n    } else {\n      readyToUpload({mime: mime, blob: blob, width: width, height: height});\n    }\n  }\n\n  render() {\n    if (this.state.newAvatar) {\n      return (\n        <AvatarCrop\n          avatar={this.state.newAvatar}\n          mime={this.state.newAvatarMime}\n          onSubmit={this.handleAvatarCropped}\n          onCancel={this.handleAvatarCropCancel}\n          onError={this.props.onError} />\n      );\n    }\n\n    let submitClasses = 'primary';\n    if (this.props.disabled) {\n      submitClasses += ' disabled';\n    }\n\n    return (\n      <form className=\"panel-form-column\" onSubmit={this.handleSubmit}>\n        <div className=\"panel-form-row\">\n          <div className=\"umn\">\n            <FormattedMessage id=\"login_prompt\" defaultMessage=\"Login\"\n              description=\"Placeholer for username/login\">{\n              (login_prompt) => <input type=\"text\" placeholder={login_prompt} autoComplete=\"user-name\"\n                value={this.state.login} onChange={this.handleLoginChange} required autoFocus />\n            }</FormattedMessage>\n            <FormattedMessage id=\"password_prompt\" defaultMessage=\"Password\"\n              description=\"Placeholder/prompt for entering password\">{\n              (password_prompt) => <VisiblePassword placeholder={password_prompt} autoComplete=\"new-password\"\n                value={this.state.password} onFinished={this.handlePasswordChange}\n                required={true} />\n            }</FormattedMessage>\n          </div>\n          <AvatarUpload\n            tinode={this.props.tinode}\n            avatar={this.state.imageUrl}\n            onImageUpdated={this.handleImageChanged}\n            onError={this.props.onError} />\n        </div>\n        <div  className=\"panel-form-row\">\n          <FormattedMessage id=\"full_name_prompt\" defaultMessage=\"Full name, e.g. John Doe\"\n            description=\"Input placeholder for person's full name\">{\n            (full_name_prompt) => <input type=\"text\" placeholder={full_name_prompt} autoComplete=\"name\"\n              value={this.state.fn} onChange={this.handleFnChange} required/>\n          }</FormattedMessage>\n        </div>\n        {this.props.reqCredMethod == 'email' ?\n          <div className=\"panel-form-row\">\n            <FormattedMessage id=\"email_prompt\" defaultMessage=\"Email, e.g. jdoe@example.com\"\n              description=\"Input placeholder for email entry\">{\n              (email_prompt) => <input type=\"email\" placeholder={email_prompt} autoComplete=\"email\"\n                value={this.state.email} onChange={this.handleEmailChange} required/>\n            }</FormattedMessage>\n          </div>\n          : this.props.reqCredMethod == 'tel' ?\n          <><div className=\"panel-form-row\">\n            <label className=\"small gray\"><FormattedMessage id=\"mobile_phone_number\" defaultMessage=\"Mobile phone number\"\n              description=\"Prompt for entering a mobile phone number\" /></label>\n          </div>\n          <div className=\"panel-form-row\">\n            <PhoneEdit\n              autoFocus={false}\n              onShowCountrySelector={this.props.onShowCountrySelector}\n              onSubmit={this.handlePhoneChange} />\n          </div></>\n          : null\n        }\n        <div className=\"panel-form-row\">\n          <CheckBox id=\"save-token\" name=\"save-token\" checked={this.state.saveToken}\n            onChange={this.handleToggleSaveToken} />\n          <FormattedMessage id=\"stay_logged_in\" defaultMessage=\"Stay logged in\"\n            description=\"Label for a checkbox\">{\n            (stay_logged_in) => <label htmlFor=\"save-token\">&nbsp;{stay_logged_in}</label>\n          }</FormattedMessage>\n        </div>\n        <div className=\"dialog-buttons\">\n          <button className={submitClasses} type=\"submit\" disabled={this.state.buttonDisabled}>\n            <FormattedMessage id=\"button_sign_up\" defaultMessage=\"Sign up\"\n              description=\"Create account button [Sign Up]\" />\n          </button>\n        </div>\n      </form>\n    );\n  }\n};\n","// Editor for a phone number.\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { AsYouType, getExampleNumber, parsePhoneNumber } from 'libphonenumber-js/mobile';\nimport examples from 'libphonenumber-js/mobile/examples'\n\nimport * as dcodes from '../dcodes.json';\nimport { flagEmoji } from '../lib/strformat';\n\nconst messages = defineMessages({\n  mobile_number_required: {\n    id: 'mobile_number_required',\n    defaultMessage: 'Mobile phone number required',\n    description: 'Error message'\n  }\n});\n\nclass PhoneEdit extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.codeMap = {};\n    dcodes.default.forEach(dc => { this.codeMap[dc.code] = dc.dial; });\n\n    const code = props.countryCode || 'US';\n    const dial = this.codeMap[code];\n\n    this.state = {\n      countryCode: code,\n      dialCode: dial,\n      localNumber: '',\n      placeholderNumber: this.placeholderNumber(code, dial)\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFinished = this.handleFinished.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.showCountrySelector = this.showCountrySelector.bind(this);\n  }\n\n  handleChange(e) {\n    const prefix = `+${this.state.dialCode}`;\n    let formatted = new AsYouType().input(`${prefix}${this.filterNumber(e.target.value)}`);\n    formatted = formatted.substring(prefix.length).trim();\n    this.setState({localNumber: formatted});\n  }\n\n  handleFinished(e) {\n    e.preventDefault();\n    const raw = `${this.state.dialCode}${this.state.localNumber.trim()}`.replace(/[^\\d]/g, '');\n    let number = null;\n    try {\n      number = parsePhoneNumber(`+${raw}`);\n    } catch (err) {}\n\n    if (!number || !number.isValid()) {\n      this.inputField.setCustomValidity(this.props.intl.formatMessage(messages.mobile_number_required));\n      return;\n    }\n\n    this.inputField.setCustomValidity('');\n    this.props.onSubmit(number.format('E.164'));\n  }\n\n\n  handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      this.handleFinished(e);\n    }\n  }\n\n  showCountrySelector() {\n    this.props.onShowCountrySelector(this.state.countryCode, this.state.dialCode,\n      (code, dial) => {\n          this.setState({\n            countryCode: code,\n            dialCode: dial,\n            placeholderNumber: this.placeholderNumber(code, dial)\n        })\n      });\n  }\n\n  // Filter out characters not permitted in a phone number.\n  filterNumber(number) {\n    if (!number) {\n      return number;\n    }\n    // Leave numbers, space, (, ), -, and .\n    // The + is not allowed: it's handled by the country code portion.\n    return number.replace(/[^-\\s().\\d]/g, '');\n  }\n\n  placeholderNumber(code, dial) {\n    const sample = getExampleNumber(code, examples);\n    return sample ? sample.formatInternational().substring(dial.length + 1).trim() : '123 0123';\n  }\n\n  render() {\n    return (\n      <>\n        <span className=\"dial-code\" onClick={this.showCountrySelector}>\n          <span className=\"country-flag\">{flagEmoji(this.state.countryCode)}&nbsp;</span>\n          +{this.state.dialCode}&nbsp;</span>\n        <input type=\"tel\" ref={ref => {this.inputField = ref}} placeholder={this.state.placeholderNumber}\n            value={this.state.localNumber} onChange={this.handleChange}\n            maxLength={17} onKeyDown={this.handleKeyDown} onBlur={this.handleFinished}\n            required autoFocus={this.props.autoFocus} />\n      </>\n    );\n  }\n}\n\nexport default injectIntl(PhoneEdit);\n"],"names":["CreateAccountView","React","constructor","props","super","this","state","login","password","meth","email","tel","fn","imageUrl","uploadUrl","newAvatar","newAvatarMime","buttonDisabled","saveToken","LocalStorageUtil","handleLoginChange","bind","handlePasswordChange","handleEmailChange","handlePhoneChange","handleFnChange","handleImageChanged","handleToggleSaveToken","handleAvatarCropped","handleAvatarCropCancel","uploadAvatar","handleSubmit","tinode","connect","catch","err","onError","message","e","setState","target","value","number","mime","img","preventDefault","onCreateAccount","trim","theCard","substring","MAX_TITLE_LENGTH","blob","width","height","url","URL","createObjectURL","avatar","readyToUpload","image","size","MAX_AVATAR_BYTES","getLargeFileHelper","upload","then","finally","_","blobToBase64","b64","makeImageUrl","data","bits","type","AVATAR_SIZE","imageScaled","MAX_EXTERN_ATTACHMENT_SIZE","scaled","render","AvatarCrop","onSubmit","onCancel","submitClasses","disabled","className","FormattedMessage","id","defaultMessage","login_prompt","placeholder","autoComplete","onChange","required","autoFocus","password_prompt","VisiblePassword","onFinished","AvatarUpload","onImageUpdated","full_name_prompt","reqCredMethod","email_prompt","PhoneEdit","onShowCountrySelector","CheckBox","name","checked","stay_logged_in","htmlFor","messages","defineMessages","mobile_number_required","codeMap","dcodes","dc","code","dial","countryCode","dialCode","localNumber","placeholderNumber","handleChange","handleFinished","handleKeyDown","showCountrySelector","prefix","formatted","AsYouType","input","filterNumber","length","raw","replace","parsePhoneNumber","isValid","inputField","setCustomValidity","format","intl","formatMessage","key","sample","getExampleNumber","examples","formatInternational","onClick","flagEmoji","ref","maxLength","onKeyDown","onBlur","injectIntl"],"sourceRoot":""}